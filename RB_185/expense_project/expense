#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
    display_count(result)
    display_expenses(result) if result.ntuples > 1
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses(amount, memo, created_on)
       VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end
  
  def search_expenses(word)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{word}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 1
  end
  
  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])
    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])
      
      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with the id #{id}'."
    end
  end
  
  def delete_all
    sql = "DELETE FROM expenses"
    @connection.exec(sql)
    puts "All expenses have been deleted."
  end
  
  private
  
  def display_count(result)
    if result.ntuples > 0
      puts "There are #{result.ntuples} expenses."
    else
      puts "There are no expenses."
    end
  end
  
  def display_expenses(result)
    result.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                tuple["created_on"].rjust(10),
                tuple["amount"].rjust(12),
                tuple["memo"] ]
  
      puts columns.join(" | ")
    end
    
    puts '-' * 50
    
    amount_sum = result.field_values("amount").map(&:to_f).inject(:+)
    
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end
  
  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 
          'public' AND table_name = 'expenses'"
    result = @connection.exec(sql)
    if result[0]["count"] == '0'
      @connection.exec(IO.read("schema.sql"))
    end
  end
end


class CLI
  def initialize
    @application = ExpenseData.new
  end
  
  def run(args)
    command = args.shift
    case command
    when "add"
      amount = args[0]
      memo = args[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      word = args[0]
      @application.search_expenses(word)
    when "delete"
      id = args[0]
      @application.delete_expense(id)
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = gets.chomp
      @application.delete_all if answer == 'y'
    else 
      display_help
    end
  end
  
  
  def display_help
    puts <<~HEREDOC
    An expense recording system
    
    Commands:
    
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HEREDOC
  end
end

CLI.new.run(ARGV)